<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>讀書心得 on Daichou&#39;s blog</title>
    <link>https://daichou.github.io/tags/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/</link>
    <description>Recent content in 讀書心得 on Daichou&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 09 Jul 2017 01:36:00 -0700</lastBuildDate>
    
	<atom:link href="https://daichou.github.io/tags/%E8%AE%80%E6%9B%B8%E5%BF%83%E5%BE%97/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Narrative History of BSD 心得</title>
      <link>https://daichou.github.io/posts/a-narrative-history-of-bsd/</link>
      <pubDate>Sun, 09 Jul 2017 01:36:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/a-narrative-history-of-bsd/</guid>
      <description>A Narrative History of BSD 這篇文為我修課時做的心得,由於原文是用hackmd寫的,在這裡版型會有差異(原文)
  什麼是BSD
 全名：Berkeley Software Distribution(柏克萊軟體套件) 類型：作業系統(UNIX-like) 創立者；Bill Joy 程式語言：C license：BSD license 描述：常用於工作站與伺服器 下圖為UNIX譜系
    全片大綱
以下是以影片中Dr. Kirk McKusick的解說分段。
 Bill Joy Era  在柏克萊大學建立 Bill Joy時期(1BSD,2BSD)納入的軟體套件：EX(vi),pascal interpreter,C Shell   TCP create  BSD 4以後的TCP/IP建立 BNN與柏克萊團隊的衝突   lawsuit of license  與AT&amp;amp;T的著作權問題      BSD歷史與提及的對照
以下是BSD的歷史與影片中的內容相互參照。
  1BSD
  釋出：1978年
  由Bill Joy創立，從早期貝爾實驗室的UNIX改寫而來</description>
    </item>
    
    <item>
      <title>The Unix System: Making Computers Easier to Use 心得</title>
      <link>https://daichou.github.io/posts/the-unix-system-making-computers-easier/</link>
      <pubDate>Sun, 09 Jul 2017 01:35:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/the-unix-system-making-computers-easier/</guid>
      <description>The Unix System: Making Computers Easier to Use 這篇文為我修課時作的心得
 摘要
這部影片主要在介紹UNIX的功能與UNIX的好   創造緣由:為了處理電話轉接工作還有解決問題
  UNIX作業系統系統特色
 time-sharing portable multi-tasking hierachical file system IPC pipes    UNIX作業系統架構
分層
描述
kernel
｜底層與硬體溝通 、管理資源
shell
｜與kernel溝通的界面
utility program ｜上層的應用程式
  utility program範例
 sort 拼字檢查(超炫的) 編輯器…等     考古
我有點好奇當時的電腦等級是如何，所以稍微找了一下youtube底下所說的DEC PDP-7規格。   圖片來源:wikipedia PDP-7
 規格：
參數
數值
記憶體
4K words 可加到 64K words</description>
    </item>
    
    <item>
      <title>Revolution OS 心得</title>
      <link>https://daichou.github.io/posts/revolution-os/</link>
      <pubDate>Sun, 09 Jul 2017 01:32:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/revolution-os/</guid>
      <description>Revolution OS 這篇文為我修課時做的心得
  摘要
內容與The Code有所重疊，但對於Linux,GNU,Free software,Open Source的成長其著墨較深，還有各期開發者與使用者加入Linux的情況有所描述。還有開源陣營與Microsft閉源陣營的對抗。主要內容涵蓋：
 GNU、BSD、Linux等社群體系的建立 Linux成長與網路的關聯(apache project) 開源社群的成長與所被業界接受(cisco採用,Oracle,Sybase等企業的貢獻) 運用開源的商業模式(服務:Redhat、VALinux、Cygnus) Linux Torvalds對於用Linux賺錢的看法 Netscape開源與Mozilla Richard Stallman對於Copyleft與自由軟體理念 開源與自由軟體運動的影響  ex:消費者可以購買不含Windows的電腦,Microsoft對於開源態度的改觀(這部影片當時Microsoft仍有點抗拒，到了Satya Nadella當任CEO時期才正式投入)      Note
片中Debian社群提到的Open Source定義原文link
 Free Redistribution Source Code Derived Works Integrity of The Author’s Source Code No Discrimination Against Persons or Groups No Discrimination Against Fields of Endeavor Distribution of License License Must Not Be Specific to a Product License Must Not Restrict Other Software License Must Be Technology-Neutral    心得</description>
    </item>
    
    <item>
      <title>The Code心得</title>
      <link>https://daichou.github.io/posts/the-code/</link>
      <pubDate>Sun, 09 Jul 2017 01:29:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/the-code/</guid>
      <description>The Code * 系列為我修課時留下的心得
* 摘要   Linus Torvarlds 的生平與Linux創作背景
包括家庭背景與當時的社經環境(ex:蘇聯解體)。
因為Minix僅限教育用途，加上當時其他的作業系統過於昂貴(SCO Unix要20000馬克)，還有just hobby等因素，開始著手開發Linux。
  open source精神
這裡直接節錄 Richard Mathhew Stallman 於片頭所說的話『開放原始碼就像是食譜，當有好的食譜，我們可以與他人分享，其他人可以對食譜加入自己的元素與口味，並將食譜回饋給原本的人或是繼續開放食譜下去。』，除此之外，open source不只是將程式原始碼開放下去這個動作，其背後可能同時創造了一個社群。
  Free Software VS Open Source
由 Richard Mathhew Stallman 提出的Free Software觀念與Free Software運動，還有Free Software Foundation對於自由軟體的推廣，讓人們認識到Free Software的意含，但是由於 Richard Mathhew Stallman 與 Free Software Foundation的言論通常較激進，導致齊備一些商人貶低，但是那群人們卻擁抱Open Source觀念(其實包括的軟體多有重疊)，所以Eric S.Raymond認為應該倡導Open Source讓人們接受。
  GNU/Linux對世界的影響
GNU/Linux影響著許多開發者，還有業界一些公司，同時開發中國家的中國與印度的開發人員也對Linux有許多貢獻。Dot com風暴後影響開源軟體的發展與關注度，但是Linux作業系統卻開始進入小型裝置，如：電子鐘、手機等裝置，使一般使用者開始接觸到Linux。
  * 心得 由於在高中時有在接觸Linux作業系統加上現在主要都以Linux作為我的筆電預設作業系統，對對於Linux的歷史本身就有一些了解，不過對於Linux創立前的歷史不甚熟悉，不知道有Richard Mathhew Stallman這位在Linux開發出來前就已經開始宣揚自由軟體理念的靈魂人物，還有BSD本身對於開源觀念的殿基，讓我們可以在現今不受拘束的宣揚Open Source與使用Open Source的軟體，而且由於這些Open Source軟體的出現，讓我們這些後人可以研究這些軟體的技術，還可以貢獻所學於這些軟體中，並讓世界更美好。
* Qustion  Linus常說Linux kernel的開發人員的組織架構是十分扁平的，大家可以自由的提出意見，但是如果開發出Code，想要commit到Linux kernel中，到底是誰負責審理的？ 為什麼Linux社群最蓬勃發展？同樣是開源的BSD系統還有Minix等專案的能見度卻沒這麼高？ Linus說印度的基礎溝通較不好，所以可能會衍生出在地版的Linux，不知有沒有出現?</description>
    </item>
    
    <item>
      <title>[偷書賊]偷書賊與過於喧囂的孤獨</title>
      <link>https://daichou.github.io/posts/review-solitude/</link>
      <pubDate>Tue, 20 Sep 2016 08:21:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/review-solitude/</guid>
      <description>[偷書賊]偷書賊與過於喧囂的孤獨 偷書賊講述的是一個二戰時期一個德國小女孩靠著文字豐富自己心靈的故事，其中穿插著二戰時期生活環境的疲敝，還有人性的本質。
而赫拉巴爾的&amp;lt;過於喧囂的孤獨&amp;gt;則是以一個在廢紙回收廠的老員工，在工作之餘將書中知識收入自己的腦海，然而，其身處於社會的角落，還做著將書本壓成廢紙的工作，雖然學識涵養豐富，但作著一般人鄙視、無視的工作。其內心是過於喧囂的孤獨。
這兩本書一個是從剛識字的小孩角度看待文字的影響力，一個是從滿腹學識的老人在知識的翻騰中對比自身的孤獨感。同樣都是以文字的力量出發，但在人生起始階段與人生終老階段，文字以不同的方式影響著人們。
這兩本書都蠻推薦的(偷書賊較淺白)。</description>
    </item>
    
    <item>
      <title>快閃大對決：一場華爾街起義</title>
      <link>https://daichou.github.io/posts/review-flash-trade/</link>
      <pubDate>Fri, 09 Sep 2016 18:39:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/review-flash-trade/</guid>
      <description>快閃大對決：一場華爾街起義 我會找到這本書完全是因為這本書的作者是&amp;lt;魔球&amp;gt;、&amp;lt;攻其不備&amp;gt;、&amp;lt;大賣空&amp;gt;的作者，我蠻喜歡他的寫作風格。這本書算是他在台最新的(雖然是2014年的)。
***
這本書主要探討近年來美國股市興起的高頻交易如何危害市場，雖然我以前就有聽過『高頻交易』這個詞，但我沒想到它的實際運作方式這麼恐怖。美國現在有13個交易所交易所(還有60幾個暗池)之間彼此都有一些距離，有些在紐約，有些在芝加哥，即便現在通訊技術發達，但這些交易系統否此間的資訊仍有幾毫秒的差距，所以如果你能在資訊從一個交易所到另一個交易所之間提前買賣股票，就等於是在買樂透時提前知道結果然後進行下注。或者是在別人買股票前提前插隊將股票買走，然後用更高的價格賣回給買家。基本上所有交易操作都在毫秒內快速來回。這造成了股市成交量爆增、波動劇烈、還有快閃崩盤，在加上股票是一個趨近於零和的賽局，當有人在你買賣間先進行了一次交易，等於是從你身上扒了一層皮。
***
最後有群人為了打擊高頻交易，設計了一個慢市交易所(IEX)，讓所有交易都慢了330us而且個交易所的資訊到這個交易所的時間差都相同，使高頻交易失去套利空間，但這場與高頻交易間的戰爭仍在大股市間上演，高頻交易仍存在於市場。
***
現在的股票市場上冒出了一個新種族(bot)，這些程式在取代大量傳統交易員，在毫秒間改變市場走向，操縱著市場。
***
這不是Fintech什麼才是Fintech？(誤)</description>
    </item>
    
  </channel>
</rss>