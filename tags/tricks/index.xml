<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tricks on Daichou&#39;s blog</title>
    <link>https://daichou.github.io/tags/tricks/</link>
    <description>Recent content in tricks on Daichou&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Thu, 13 Jul 2017 01:21:00 -0700</lastBuildDate>
    
	<atom:link href="https://daichou.github.io/tags/tricks/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C/C&#43;&#43;中避免unused variable造成報錯的方法(void cast of argc/argv)</title>
      <link>https://daichou.github.io/posts/ccunused-variablevoid-cast-of-argcargv/</link>
      <pubDate>Thu, 13 Jul 2017 01:21:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/ccunused-variablevoid-cast-of-argcargv/</guid>
      <description>一些Signal handler或是Thread(CMSIS-RTOS)的建立會要求你的的函數強制吃一些argument。
當你的compiler開 -Werror -Wall -Wunused-variable選項時,這些未被使用的變數會報錯。
這時有兩個解法。
 void cast  例如:
void f(void * argc) { (void) argc; } 這會無害的去用到這個變數。
2.自己等於自己
例如:
void f(void * argc) { argc = argc; } 這兩招就是欺騙compiler這些變數已經被使用。
我第一次看到這寫法真的嚇到了。
以下是stackoverflow的討論。
https://stackoverflow.com/questions/21045615/what-does-voidvar-actually-do
https://stackoverflow.com/questions/8052091/void-cast-of-argc-and-argv?rq=1</description>
    </item>
    
    <item>
      <title>[Note] GDB 一些指令功能速查</title>
      <link>https://daichou.github.io/posts/note-gdb/</link>
      <pubDate>Fri, 03 Mar 2017 21:09:00 -0800</pubDate>
      
      <guid>https://daichou.github.io/posts/note-gdb/</guid>
      <description>[Note] GDB 一些指令功能速查 前情提要 這篇主要是介紹gdb的一些常用功能，遇到的時候方便google。
常用功能  backtrace breakpoint watchpoint stopwatch dump register dump variable continue and stop disasmmebly return  指令速查  backtrace  bt   breakpoint  b br   watchpoint  watch variable_name or watch variable_address   stopwatch  maint link   dump register  info r   dump variable  print variable_name print &amp;amp;variable_name =&amp;gt; get address print *variable_address =&amp;gt; get address contents info display   continue and stop  c =&amp;gt; continue r= &amp;gt; run stop =&amp;gt; Ctrl+c   disasmmebly  disassemble (func…) link layout asm layout src   return  return (return this stack)     Written with StackEdit.</description>
    </item>
    
    <item>
      <title>在linux上製作win10 live USB</title>
      <link>https://daichou.github.io/posts/linuxwin10-live-usb/</link>
      <pubDate>Sat, 10 Sep 2016 20:22:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/linuxwin10-live-usb/</guid>
      <description>在linux上製作win10 live USB 這部份很簡單，只要記住一個重要的程式『winusb』，安裝這個程式，一切都簡單。
首先，以arch linux 為例，winusb是在aur裡，所以只要下：
$ yaourt -Sy winusb 即可安裝。
接著開始製作live usb，先找到win10 ISO 檔的路徑，還有你的隨身碟隨身碟掛載路徑，下以下指令：
$ winusb --install &amp;lt;iso path&amp;gt; &amp;lt;partition&amp;gt; 記得要用root or sudo來做。即可完成。</description>
    </item>
    
    <item>
      <title>Jekyll 一些問題解法</title>
      <link>https://daichou.github.io/posts/jekyll/</link>
      <pubDate>Wed, 31 Aug 2016 07:58:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/jekyll/</guid>
      <description>用github架Jekyll 一些問題解法 當一開始使用
$ jekyll serve 的時候，可能會遇到一些問題(其實是我遇到的啦)
jekyll serve not found 這是一個很好處理的問題，因爲你的~/.gem/ruby/{version}/bin資料夾沒有在$PATH路徑下。加上去就可解決了。
缺少bundler
kernel_require.rb:55:in `require&amp;#39;: cannot load such file -- bundler (LoadError) 大概的error如上。處理方式很簡單，就是安裝bundler。
$ gem install bundler 這樣就解決了。
如果還有以下錯誤：
resolver.rb:356:in `block in verify_gemfile_dependencies_are_found!&#39;: Could not find gem &amp;lsquo;jekyll-sitemap&amp;rsquo; in any of the gem sources listed in your Gemfile or available on this machine. (Bundler::GemNotFound)
則多下一行指令：
$ bundle install --path vendor/bundle invalid date &amp;hellip;YAML.. 跑jekyll serve的時候可能會有噴出一堆如下的錯誤。
Invalid date &amp;#39;&amp;lt;%= Time.now.strftime(&amp;#39;%Y-%m-%d %H:%M:%S %z&amp;#39;) %&amp;gt;&amp;#39;: Document &amp;#39;vendor/bundle/ruby/2.</description>
    </item>
    
  </channel>
</rss>