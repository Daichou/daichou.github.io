<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Note on Daichou&#39;s blog</title>
    <link>https://daichou.github.io/tags/note/</link>
    <description>Recent content in Note on Daichou&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 22 Jul 2018 01:34:00 -0700</lastBuildDate>
    
	<atom:link href="https://daichou.github.io/tags/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Arduino: High resolution PWM (more than 8bits),Arduino提高PWM resolution</title>
      <link>https://daichou.github.io/posts/arduino-high-resolution-pwm-more-than/</link>
      <pubDate>Sun, 22 Jul 2018 01:34:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/arduino-high-resolution-pwm-more-than/</guid>
      <description>Arduino PWM(analogWrite) Arduino PWM是使用analogWrite，但是其有一個限制，也就是PWM resolution只有256，PWM duty cycle的值只能介於0~255，對於一般的應用來說，這個值還可以應付，但是對於高精度的Servo或是馬達，這個值實在是太小了。(請參考analogWrite)。雖然在有些板子Arduino提供analogWriteResolution這個函式(Zero, Due &amp;amp; MKR Family、參閱：analogWriteResolution)可以將PWM resolution提高至12，更高的值內部會做mapping到比較低解析度。至於其他板子(例如:Arduino Mega 2560)，則需要第三方library支援(或是自己寫)。</description>
    </item>
    
    <item>
      <title>對MPLAB X IDE產生之專案導入git</title>
      <link>https://daichou.github.io/posts/mplab-x-idegit/</link>
      <pubDate>Wed, 18 Jul 2018 07:25:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/mplab-x-idegit/</guid>
      <description>MPLAB X IDE產生之專案架構 MPLAB X IDE產生之專案會XXX.</description>
    </item>
    
    <item>
      <title>CMake: find_package and custom find cmake (findXXX.cmake)</title>
      <link>https://daichou.github.io/posts/cmake-findpackage-and-custom-find-cmake/</link>
      <pubDate>Sat, 14 Jul 2018 02:06:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/cmake-findpackage-and-custom-find-cmake/</guid>
      <description>CMake: find_package and custom find cmake (findXXX.</description>
    </item>
    
    <item>
      <title>CMake Tricks: 一些小技巧</title>
      <link>https://daichou.github.io/posts/cmake-tricks/</link>
      <pubDate>Fri, 13 Jul 2018 23:19:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/cmake-tricks/</guid>
      <description>CMake Tricks: 一些小技巧 有常在編一些opensource的專案的應該都對CMake不陌生。這篇文章就整理些我在編使用CMake的專案時遇到的一些問題與解法。
追加Compiler flags CMake裡面有一些變數是用來pass compiler flag給compiler，例如：CMAKE_CXX_FLAGS是用來給g++之類的C++ Compiler。這些變數當然是可以修改的。常見比較好的作法按依照該專案開發者定義的BUILD_TYPE來編，CMake裡面有一些常見的BUILD_TYPE，例如：Debug, Release, RelWithDebInfo &amp;hellip;&amp;hellip;等。可以透過在產生Makefile時下：</description>
    </item>
    
    <item>
      <title>Blogger Syntax highlight over https</title>
      <link>https://daichou.github.io/posts/blogger-syntax-highlight-over-https/</link>
      <pubDate>Fri, 13 Jul 2018 20:56:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/blogger-syntax-highlight-over-https/</guid>
      <description>Blogger Syntax highlight over https 由於現在blogger要求https，以往的常用的scripts：</description>
    </item>
    
    <item>
      <title>使用LXC建立USB以及X-forward環境(deprecated)</title>
      <link>https://daichou.github.io/posts/lxcusbx-forward-debiandebianarch/</link>
      <pubDate>Fri, 09 Mar 2018 18:51:00 -0800</pubDate>
      
      <guid>https://daichou.github.io/posts/lxcusbx-forward-debiandebianarch/</guid>
      <description>使用LXC建立USB以及X forward環境(deprecated) 因為修課需要一些debian系的工具，不過我不想讓debian系的和Arch Linux混在一起，所以LXC看起來是一個不錯的解。
環境  OS: Arch Linux (4.</description>
    </item>
    
    <item>
      <title>Arduino TLC5940與伺服馬達</title>
      <link>https://daichou.github.io/posts/arduino-tlc5940/</link>
      <pubDate>Fri, 08 Sep 2017 22:39:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/arduino-tlc5940/</guid>
      <description>Arduino TLC5940與伺服馬達 TLC5940介紹 TLC5940是TI的16 channel LED驅動晶片。可以支援同時16通道的PWM灰階輸出，解析度為4096階。同時有兩種模式 12 bit (4096 Steps) Grayscale PWM Control 和 Dot Correction。</description>
    </item>
    
    <item>
      <title>MPU6050 Gyroscope/Accelerometer 使用筆記</title>
      <link>https://daichou.github.io/posts/mpu6050-gyroscopeaccelerometer/</link>
      <pubDate>Thu, 27 Apr 2017 04:38:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/mpu6050-gyroscopeaccelerometer/</guid>
      <description>MPU6050 Gyroscope/Accelerometer 使用筆記 特性與參數  用途：量測姿態 精度：  Gyro : 250/500/1000/2000 dps (degree per second) Accel : +-2/4/6/16 g   輸出資料：為angular rate(角速度) ，16bit , LSB/g 原始感應器電壓VDD(僅有晶片)：2.</description>
    </item>
    
    <item>
      <title>[Note] GDB 一些指令功能速查</title>
      <link>https://daichou.github.io/posts/note-gdb/</link>
      <pubDate>Fri, 03 Mar 2017 21:09:00 -0800</pubDate>
      
      <guid>https://daichou.github.io/posts/note-gdb/</guid>
      <description>[Note] GDB 一些指令功能速查 前情提要 這篇主要是介紹gdb的一些常用功能，遇到的時候方便google。</description>
    </item>
    
    <item>
      <title>L3G4200 gyroscope使用筆記</title>
      <link>https://daichou.github.io/posts/l3g4200-gyroscope/</link>
      <pubDate>Sat, 18 Feb 2017 17:50:00 -0800</pubDate>
      
      <guid>https://daichou.github.io/posts/l3g4200-gyroscope/</guid>
      <description>L3G4200 gyroscope使用筆記 特性與參數  用途：量測姿態 精度：250/500/2000 dps (degree per second) 輸出資料：為angular rate(角速度) ，16bit 原始感應器電壓(僅有晶片)：2.</description>
    </item>
    
    <item>
      <title>Valgrind:C/C&#43;&#43;分析工具</title>
      <link>https://daichou.github.io/posts/valgrindcc/</link>
      <pubDate>Fri, 13 Jan 2017 22:05:00 -0800</pubDate>
      
      <guid>https://daichou.github.io/posts/valgrindcc/</guid>
      <description>Valgrind:C/C++分析工具 Valgrind是開源的測試框架，可以用來動態分析記憶體配置、快取使用、多執行序bug。
安裝 $ sudo pacman -Sy valgrind 基本用法 $ valgrind 程式名稱 args 預設會是用memcheck工具分析，在這個工具下她會匯出heap使用、memory leak、還有記憶體使用錯誤的部份backtrace。 進階用法 $ valgrind --tool=toolname 程式名稱 args 這是valgrind最有方便的地方，valgrind旗下有九個使用者端的工具，和幾個開發者工具。 1.</description>
    </item>
    
    <item>
      <title>[Note]Microcontroller的排程方式</title>
      <link>https://daichou.github.io/posts/notemicrocontroller/</link>
      <pubDate>Wed, 07 Dec 2016 03:06:00 -0800</pubDate>
      
      <guid>https://daichou.github.io/posts/notemicrocontroller/</guid>
      <description>[Note]Microcontroller的排程方式 這篇為我看完Microchip Technology 20024 FRM4 - Interrupt and Task Scheduling - No RTOS Required後所作的筆記。</description>
    </item>
    
    <item>
      <title>C99 fast data type</title>
      <link>https://daichou.github.io/posts/c99-fast-data-type/</link>
      <pubDate>Tue, 06 Dec 2016 20:05:00 -0800</pubDate>
      
      <guid>https://daichou.github.io/posts/c99-fast-data-type/</guid>
      <description>C99 fast data type 這個主題是我在看完Efficient C Tip #13 – use the modulus (%) operator with caution這篇文章發現的C99在stdint.</description>
    </item>
    
    <item>
      <title>『note』目前的vim</title>
      <link>https://daichou.github.io/posts/notevim/</link>
      <pubDate>Wed, 28 Sep 2016 23:16:00 -0700</pubDate>
      
      <guid>https://daichou.github.io/posts/notevim/</guid>
      <description>『note』目前的vim 本文僅僅紀錄我用了什麼vim plugin。
首先.vimrc
https://github.com/Daichou/environment/blob/master/.vimrc</description>
    </item>
    
  </channel>
</rss>